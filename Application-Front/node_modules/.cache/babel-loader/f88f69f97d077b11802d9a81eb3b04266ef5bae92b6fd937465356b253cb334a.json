{"ast":null,"code":"import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nconst SecurityRoute = ({\n  requiredRole,\n  children\n}) => {\n  // a changer: ici le role est récupéré directementà la suite du log et enregistré alors que, pour plus de sécurité il faudra qu'à chaque appel de page (admin ou user) le role soit vérifié sur le serveur à l'aide du token!\n  const userRole = localStorage.getItem(\"role\");\n\n  // if (!userRole || userRole !== requiredRole) {\n  //     // Si l'utilisateur n'est pas authentifié ou n'a pas le bon rôle,  page de connexion\n  //     return <Navigate to=\"/login\" />;\n  // }\n\n  // Sinon,  contenu protégé\n  return children;\n};\n_c = SecurityRoute;\nexport default SecurityRoute;\nvar _c;\n$RefreshReg$(_c, \"SecurityRoute\");","map":{"version":3,"names":["React","Navigate","SecurityRoute","requiredRole","children","userRole","localStorage","getItem","_c","$RefreshReg$"],"sources":["C:/Users/FiercePC/Desktop/VSCode/Appli-EPRD_Drive_API/application-front/src/Components/SecurityRoute.js"],"sourcesContent":["import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\n\r\n \r\n\r\nconst SecurityRoute = ({ requiredRole, children }) => {\r\n    // a changer: ici le role est récupéré directementà la suite du log et enregistré alors que, pour plus de sécurité il faudra qu'à chaque appel de page (admin ou user) le role soit vérifié sur le serveur à l'aide du token!\r\n    const userRole = localStorage.getItem(\"role\");\r\n\r\n    // if (!userRole || userRole !== requiredRole) {\r\n    //     // Si l'utilisateur n'est pas authentifié ou n'a pas le bon rôle,  page de connexion\r\n    //     return <Navigate to=\"/login\" />;\r\n    // }\r\n\r\n    // Sinon,  contenu protégé\r\n    return children;\r\n};\r\n\r\nexport default SecurityRoute;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAK3C,MAAMC,aAAa,GAAGA,CAAC;EAAEC,YAAY;EAAEC;AAAS,CAAC,KAAK;EAClD;EACA,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;;EAE7C;EACA;EACA;EACA;;EAEA;EACA,OAAOH,QAAQ;AACnB,CAAC;AAACI,EAAA,GAXIN,aAAa;AAanB,eAAeA,aAAa;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FiercePC\\\\Desktop\\\\VSCode\\\\Appli-EPRD_Drive_API\\\\application-front\\\\src\\\\Components\\\\LoginPage\\\\LoginPage.js\",\n  _s = $RefreshSig$();\nimport \"./LoginPage.css\";\n// Importation des bibliothèques nécessaires\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, uselocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const navigate = useNavigate();\n\n  // États pour stocker le nom d'utilisateur et le mot de passe, le token et les données\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [token, setToken] = useState(null);\n  const [dataAPI, setDataAPI] = useState({});\n  useEffect(() => {\n    if (token) {\n      const fetchData = async () => {\n        try {\n          const response = await fetch(\"https://127.0.0.1:8000/drive_API/user\", {\n            method: \"GET\",\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          if (response.status === 401) {\n            navigate(\"/\", {\n              state: {\n                message: \"Identifiants non reconnus Veuillez vous reconnecter.\"\n              }\n            });\n          } else if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          const data = await response.json();\n          setDataAPI(data); // Stocker les données utilisateur\n        } catch (error) {\n          console.log(\"Erreur de récupération de données:\", error);\n        }\n      };\n      fetchData();\n    }\n  }, [token]);\n\n  // Un autre useEffect pour la navigation\n  useEffect(() => {\n    if (dataAPI) {\n      console.log(dataAPI);\n      // Vérifiez que dataAPI.role existe et a au moins un élément\n      if (dataAPI.role && dataAPI.role.length > 0) {\n        if (dataAPI.role[0] === \"ROLE_ADMIN\") {\n          localStorage.setItem(\"role\", \"admin\");\n        } else if (dataAPI.role[0] === \"ROLE_USER\") {\n          localStorage.setItem(\"role\", \"user\");\n        }\n        navigate(dataAPI.role[0] === \"ROLE_ADMIN\" ? `/admin` : `/user/${dataAPI.id}`, {\n          state: {\n            ...dataAPI\n          }\n        });\n      } else {\n        console.log(\"Le rôle n'est pas défini ou vide\");\n      }\n    }\n  }, [dataAPI, navigate]);\n\n  // Fonction pour gérer la soumission du formulaire\n  const handleSubmit = async event => {\n    event.preventDefault();\n    //appel API pour le token\n    const response = await fetch(\"https://127.0.0.1:8000/drive_API/login_check\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (response.ok) {\n      const dataToken = await response.json();\n      setToken(dataToken.token);\n      localStorage.setItem(\"token\", dataToken.token);\n    } else {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    //  code cidessous: dataTests pour l'app react avant la mise en place de l'API\n    // let data = {\n    //     // donnée qui sert à afficher le bon type de page (admin ou utilisateur?)\n    //     role: \"user\",\n    //     // donnée qui est injectée dans l'URL (pourra éventuellement servir si il y a plusieurs administrateurs)\n    //     id_user: 1565,\n    //     // donnée que j'utilise pour afficher le nom de l'utilisateur qui s'est connecté (admin ou user)\n    //     username: \"Rémi\",\n    //     // donnée qui permet l'affichage de la partothèque (en mode admin ou user)  je récupère le titre pour l'affichage et l'ID pour la future MAJ des partothèques User par l'admin (en drag and drop)\n    //     collection: [\n    //         [\"Sakura\", 89],\n    //         [\"Olympic fanfare and theme\", 75],\n    //         [\"Ceremonial Hymn\", 18],\n    //         [\"Arsenal\", 32],\n    //         [\"The wind in the willows\", 54],\n    //     ],\n    //     // ces données servent pour l'affichage des contenus des partothèques \"utilisateurs\" sur la page admin (id_user ne servira que pour la MAJ des partothèques User par l'admin , l'objet complet est renvoyé et il faudra en extraire id-user pour le rajouter dans la table associative exemple rajouter un enregistrement id_user=3 et id_fichier=75) ce qui permettra de rajouter \"Olympic fanfare and theme\" à l'utilisateur Flavie dans cet exemple)\n    //     listUsers: [\n    //         {\n    //             name: \"Elphège\",\n    //             id_user: 1,\n    //             titres: [\n    //                 [\"Ceremonial Hymn\", 18],\n    //                 [\"Arsenal\", 32],\n    //                 [\"The wind in the willows\", 54],\n    //             ],\n    //         },\n    //         {\n    //             name: \"Magalie\",\n    //             id_user: 2,\n    //             titres: [\n    //                 [\"Olympic fanfare and theme\", 75],\n    //                 [\"Ceremonial Hymn\", 18],\n    //             ],\n    //         },\n    //         {\n    //             name: \"Flavie\",\n    //             id_user: 3,\n    //             titres: [],\n    //         },\n    //         {\n    //             name: \"MarieH\",\n    //             id_user: 4,\n    //             titres: [[\"The wind in the willows\", 54]],\n    //         },\n    //     ],\n    // };\n    // localStorage.setItem(\"role\", data.role);\n    // navigate(data.role === \"admin\" ? \"/admin\" : `/user/${data.id_user}`, {\n    //     state: { ...data },\n    // });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"conn\",\n      children: \"Application Partoth\\xE8que\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containerConnex\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Connexion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formGroup\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"username\",\n            children: \"Nom d'utilisateur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"username\",\n            value: username,\n            onChange: e => setUsername(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formGroup\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Mot de passe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btnLogin\",\n          type: \"submit\",\n          children: \"Se connecter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(LoginPage, \"33xcK6AsF5gZukgXBVttmXenHlI=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","uselocation","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginPage","_s","navigate","username","setUsername","password","setPassword","token","setToken","dataAPI","setDataAPI","fetchData","response","fetch","method","headers","Authorization","status","state","message","ok","Error","data","json","error","console","log","role","length","localStorage","setItem","id","handleSubmit","event","preventDefault","body","JSON","stringify","dataToken","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","value","onChange","e","target","required","_c","$RefreshReg$"],"sources":["C:/Users/FiercePC/Desktop/VSCode/Appli-EPRD_Drive_API/application-front/src/Components/LoginPage/LoginPage.js"],"sourcesContent":["import \"./LoginPage.css\";\r\n// Importation des bibliothèques nécessaires\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, uselocation } from \"react-router-dom\";\r\n\r\nconst LoginPage = () => {\r\n    const navigate = useNavigate();\r\n\r\n    // États pour stocker le nom d'utilisateur et le mot de passe, le token et les données\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [token, setToken] = useState(null);\r\n    const [dataAPI, setDataAPI] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            const fetchData = async () => {\r\n                try {\r\n                    const response = await fetch(\r\n                        \"https://127.0.0.1:8000/drive_API/user\",\r\n                        {\r\n                            method: \"GET\",\r\n                            headers: {\r\n                                Authorization: `Bearer ${token}`,\r\n                                \"Content-Type\": \"application/json\",\r\n                            },\r\n                        }\r\n                    );\r\n                    if (response.status === 401) {\r\n                        navigate(\"/\", {\r\n                            state: {\r\n                                message:\r\n                                    \"Identifiants non reconnus Veuillez vous reconnecter.\",\r\n                            },\r\n                        });\r\n                    } else if (!response.ok) {\r\n                        throw new Error(\r\n                            `HTTP error! status: ${response.status}`\r\n                        );\r\n                    }\r\n\r\n                    const data = await response.json();\r\n                    setDataAPI(data); // Stocker les données utilisateur\r\n                } catch (error) {\r\n                    console.log(\"Erreur de récupération de données:\", error);\r\n                }\r\n            };\r\n\r\n            fetchData();\r\n        }\r\n    }, [token]);\r\n\r\n    // Un autre useEffect pour la navigation\r\n    useEffect(() => {\r\n        if (dataAPI) {\r\n            console.log(dataAPI);\r\n            // Vérifiez que dataAPI.role existe et a au moins un élément\r\n            if (dataAPI.role && dataAPI.role.length > 0) {\r\n                if (dataAPI.role[0] === \"ROLE_ADMIN\") {\r\n                    localStorage.setItem(\"role\", \"admin\");\r\n                } else if (dataAPI.role[0] === \"ROLE_USER\") {\r\n                    localStorage.setItem(\"role\", \"user\");\r\n                }\r\n                navigate(\r\n                    dataAPI.role[0] === \"ROLE_ADMIN\"\r\n                        ? `/admin`\r\n                        : `/user/${dataAPI.id}`,\r\n                    {\r\n                        state: { ...dataAPI },\r\n                    }\r\n                );\r\n            } else {\r\n                console.log(\"Le rôle n'est pas défini ou vide\");\r\n            }\r\n        }\r\n    }, [dataAPI, navigate]);\r\n\r\n    // Fonction pour gérer la soumission du formulaire\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        //appel API pour le token\r\n        const response = await fetch(\r\n            \"https://127.0.0.1:8000/drive_API/login_check\",\r\n            {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ username, password }),\r\n            }\r\n        );\r\n\r\n        if (response.ok) {\r\n            const dataToken = await response.json();\r\n            setToken(dataToken.token);\r\n            localStorage.setItem(\"token\", dataToken.token);\r\n        } else {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        //  code cidessous: dataTests pour l'app react avant la mise en place de l'API\r\n        // let data = {\r\n        //     // donnée qui sert à afficher le bon type de page (admin ou utilisateur?)\r\n        //     role: \"user\",\r\n        //     // donnée qui est injectée dans l'URL (pourra éventuellement servir si il y a plusieurs administrateurs)\r\n        //     id_user: 1565,\r\n        //     // donnée que j'utilise pour afficher le nom de l'utilisateur qui s'est connecté (admin ou user)\r\n        //     username: \"Rémi\",\r\n        //     // donnée qui permet l'affichage de la partothèque (en mode admin ou user)  je récupère le titre pour l'affichage et l'ID pour la future MAJ des partothèques User par l'admin (en drag and drop)\r\n        //     collection: [\r\n        //         [\"Sakura\", 89],\r\n        //         [\"Olympic fanfare and theme\", 75],\r\n        //         [\"Ceremonial Hymn\", 18],\r\n        //         [\"Arsenal\", 32],\r\n        //         [\"The wind in the willows\", 54],\r\n        //     ],\r\n        //     // ces données servent pour l'affichage des contenus des partothèques \"utilisateurs\" sur la page admin (id_user ne servira que pour la MAJ des partothèques User par l'admin , l'objet complet est renvoyé et il faudra en extraire id-user pour le rajouter dans la table associative exemple rajouter un enregistrement id_user=3 et id_fichier=75) ce qui permettra de rajouter \"Olympic fanfare and theme\" à l'utilisateur Flavie dans cet exemple)\r\n        //     listUsers: [\r\n        //         {\r\n        //             name: \"Elphège\",\r\n        //             id_user: 1,\r\n        //             titres: [\r\n        //                 [\"Ceremonial Hymn\", 18],\r\n        //                 [\"Arsenal\", 32],\r\n        //                 [\"The wind in the willows\", 54],\r\n        //             ],\r\n        //         },\r\n        //         {\r\n        //             name: \"Magalie\",\r\n        //             id_user: 2,\r\n        //             titres: [\r\n        //                 [\"Olympic fanfare and theme\", 75],\r\n        //                 [\"Ceremonial Hymn\", 18],\r\n        //             ],\r\n        //         },\r\n        //         {\r\n        //             name: \"Flavie\",\r\n        //             id_user: 3,\r\n        //             titres: [],\r\n        //         },\r\n        //         {\r\n        //             name: \"MarieH\",\r\n        //             id_user: 4,\r\n        //             titres: [[\"The wind in the willows\", 54]],\r\n        //         },\r\n        //     ],\r\n        // };\r\n        // localStorage.setItem(\"role\", data.role);\r\n        // navigate(data.role === \"admin\" ? \"/admin\" : `/user/${data.id_user}`, {\r\n        //     state: { ...data },\r\n        // });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"conn\">Application Partothèque</h1>\r\n            <div className=\"containerConnex\">\r\n                <h2>Connexion</h2>\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"formGroup\">\r\n                        <label htmlFor=\"username\">Nom d'utilisateur</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"formGroup\">\r\n                        <label htmlFor=\"password\">Mot de passe</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <button className=\"btnLogin\" type=\"submit\">\r\n                        Se connecter\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}